//
// Created by Ioannis Baraklilis on 26/3/21.
// Comments in UTF-8 encoding.
//

#ifndef PUZZLE_H
#define PUZZLE_H

#include <vector>
#include <string>
#include <ostream>

#define WIDTH 3 // Σταθερά στηλών
#define HEIGHT 3 // Σταθερά γραμμών

/*
 * Η κλάση Puzzle μοντελοποιεί την οντότητα της κατάστασης ενός προβλήματος πλακιδίων δηλαδή περιέχει τις θέσεις του κάθε πλακιδίου,
 * δείκτη σε αντικείμενο Puzzle ("γονέα") από το οποίο παρήχθησε η εκάστοτε κατάσταση και μία συμβολοσειρά που περιγράφει
 * την μεταβολή που έγινε στην "γονική" κατάσταση ώστε να παραχθεί.
 *
 * Παράλληλα, προσφέρει τις απαραίτητες μεθόδους για επίλυση του προβλήματος όπως ορισμός των τιμών των πλακιδίων,
 * δημιουργίας παράγωγων καταστάσεων από την τρέχουσα και επιστροφή λίστας με δείκτες προς τις
 * καταστάσεις που σχηματίζουν μονοπάτι από την αρχική κατάσταση μέχρι την τρέχουσα.
 */
class Puzzle {
private:
    unsigned long tiles[HEIGHT][WIDTH];  // Ο πίνακας με τα πλακίδια.

    // Δείκτης προς την κατάσταση απο την οποία παρήχθει η τρέχουσα κατάσταση, το αντικείμενο "γονέα".
    Puzzle * parentPtr;

    // Συμβολοσειρά που περιγράφει την μεταβολή απο "γονική" κατάσταση ώστε να παραχθεί η τρέχουσα.
    std::string moveFromParentAction;

    long emptyTileRow; // "Συντεταγμένη" γραμμής κενού πλακιδίου.
    long emptyTileColumn; // "Συντεταγμένη" στήλης κενού πλακιδίου.

    unsigned long heuristicEvaluation; // Αποθηκεύει την εκάστοτε ευρεστική τιμή που δίνεται απο την αντίστοιχη μέθοδο setter.

    // Ανταλλάσει τα στοιχεία του πίνακα τιμών των πλακιδίων.
    void swapTiles(long row1, long column1, long row2, long column2);

public:
    // Default κατασκευαστής, αρχικοποιεί τις τιμές των όλων πλακιδίων σε πρότυπη κατάσταση, δηλαδή αρχίζοντας απο 1 στο πρώτο
    // στοιχείο στην πρώτη στήλη και πρώτη γραμμή και κάθε επόμενο στοιχείο (επόμενης στήλης) έχει τιμή κατα 1 μεγαλύτερη (επόμενο στοιχείο απο εκείνο
    // στην τελευταία στήλη κάποιας γραμμής θεωρείται το στοιχείο της πρώτης στήλης της επόμενης γραμμής, αν υπάρχει). Εξαίρεση αποτελεί το
    // στοιχείο της τελευταίας γραμμής και στήλης όπου έχει τιμή 0 και θεωρείται ως κενό πλακίδιο.
    Puzzle();

    // Τελεστής ανάθεσης. Θέτει ως τιμές του τρέχοντος (this) αντικειμένου τις τιμές του δοθέντος αντικειμένου.
    Puzzle &operator=(const Puzzle &copySrs);

    /*
     * Θέτει τις τιμές του δισδιάστατου πίνακα tilesArg ως τιμές πλακιδίων στην τρέχουσα κατάσταση.
     *
     * Το μέγεθος του πίνακα ορίσματος πρέπει να έχει μέγεθος ανάλογο με αυτό που ορίζουν οι σταθερές WIDTH και HEIGHT, δηλαδή
     * να έχει αριθμό γραμμών HEIGHT και στηλών WIDTH. Σε διαφορετική περίπτωση η μέθοδος τερματίζει και επιστρέφεται false, ενώ
     * η κατάσταση του πίνακα πλακιδίων δεν μεταβάλεται.
     *
     * Οι τιμές του πίνακα ορίσματος πρέπει να είναι διαφορετικές μεταξύ τους. Σε διαφορετική περίπτωση η μέθοδος τερματίζει και επιστρέφεται false, ενώ
     * η κατάσταση του πίνακα πλακιδίων δεν μεταβάλεται.
     *
     * Ως κενό πλακίδιο θεωρείται το πλακίδιο με τιμή 0.
     *
     * Επιστρέφει την κατάσταση επιτυχίας.
     */
    bool setTileValues(std::vector<std::vector<unsigned long>> tilesArg);

    // Επιστρέφει την κατάσταση που προκύπτει με την μετακίνηση του κενού πλακιδίου προς τα πάνω.
    // Αν απαγορεύεται (δεν ορίζεται) η μετάβαση αυτή, επιστρέφει nullptr.
    Puzzle * moveUp();

    // Επιστρέφει την κατάσταση που προκύπτει με την μετακίνηση του κενού πλακιδίου προς τα κάτω.
    // Αν απαγορεύεται (δεν ορίζεται) η μετάβαση αυτή, επιστρέφει nullptr.
    Puzzle * moveDown();

    // Επιστρέφει την κατάσταση που προκύπτει με την μετακίνηση του κενού πλακιδίου προς τα αριστερά.
    // Αν απαγορεύεται (δεν ορίζεται) η μετάβαση αυτή, επιστρέφει nullptr.
    Puzzle * moveLeft();

    // Επιστρέφει την κατάσταση που προκύπτει με την μετακίνηση του κενού πλακιδίου προς τα δεξιά.
    // Αν απαγορεύεται (δεν ορίζεται) η μετάβαση αυτή, επιστρέφει nullptr.
    Puzzle * moveRight();

    // Επιστρέφει πίνακα με τους δείκτες προς κάθε κατάσταση που μπορεί να παραχθεί (ορίζεται μετάβαση πρός) απο
    // την τρέχουσα.
    std::vector<Puzzle *> expandAll();

    // Επιστρέφει πίνακα με δείκτες προς τις καταστάσεις που σχηματίζουν μονοπάτι από την αρχική κατάσταση ("ρίζα" / "root")
    // που οδηγεί στην τρέχουσα.
    std::vector<Puzzle *> pathToRoot();

    // Επιστρέφει συμβολοσειρά που περιγράφει την μεταβολή απο "γονική" κατάσταση ώστε να παραχθεί η τρέχουσα.
    // Σε περίπτωση που αυτή η κατάσταση δεν προήλθε απο κάποια άλλη επιστρέφεται "Root".
    std::string getParentAction();

    // Τελεστής ισότητας.
    // Ως ίσες ορίζονται δύο καταστάσεις αν οι θέσεις όλων των πλακιδίων ταυτίζονται,
    // δηλαδή αν έχουν ίδιους πίνακες πλακιδίων.
    bool operator==(const Puzzle &compareToObj) const;

    // Επιστρέφει το μήκος του μονοπατιού απο την ρίζα (τον πιο παλιό "γονέα") μέχρι το τρέχον.
    unsigned long getLengthToRoot();

    // Επιστρέφει το πλήθος των πλακιδίων εκτός θέσης σε σχέση με το αντικείμενο του ορίσματος.
    // Μπορεί να χρησιμοποιηθεί ως ευρετική συνάρτηση για χρήση σε ευρετικούς αλγορίθμους.
    unsigned long tilesOutOfPlace(const Puzzle &compareToObj);

    // Επιστρέφει την αποθηκευμένη τιμή της ευρετικής συνάρτησης για το δεδομένο (this) αντικείμενο.
    unsigned long getHeuristicEvaluation() const;

    // Ορίζει την αποθηκευμένη τιμή της ευρετικής συνάρτησης για το δεδομένο (this) αντικείμενο.
    void setHeuristicEvaluation(unsigned long heuristicEvaluation);

    // Υπερφόρτωση τελεστή <<.
    // Τυπώνει στην δοθείσα έξοδο τα περιεχόμενα του πίνακα ανα γραμμή (δηλαδή την αναπαράσταση της κατάστασης).
    // Ως πρώτη γραμμή θεωρείται η γραμμή 0 (Row 0).
    friend std::ostream &operator<<(std::ostream &os, const Puzzle &puzzle);

    // Επιστρέφει δισδιάστατο πίνακα με τις τιμές των πλακιδίων.
    std::vector<std::vector<unsigned long>> getTiles();

    // Αποτελεί συνάρτηση κατακερματισμού της κλάσης.
    unsigned long getHashValue();
};

/*
 * Η κλάση PuzzleHashFunction, υλοποιεί τον τελεστή () που επιστρέφει την τιμή συνάρτησης κατακερματισμού για κάποιο αντικείμενο
 * στο οποίο αντιστοιχεί ο δείκτης ορίσματος.
 *
 * Δέχεται ως όρισμα έναν δείκτη σε Puzzle και επιστρέφει μία αντιπροσωπευτική τιμή (hash value) για το αντικείμενο στο οποίο δείχνει.
 *
 * Χρησιμοποιείται ως παράμετρος τύπου στην κλάση unordered_set ώστε εκείνη να μπορεί να αποθηκεύει δείκτες σε και όχι
 * τα ίδια τα αντικείμενα Puzzle, ενώ παράλληλα να έχει πρόσβαση στην συνάρτηση κατακερματισμού του αντικειμένου
 * και είναι απαραίτητο για την λειτουργία της κλάσης unordered_set.
 */
class PuzzleHashFunction{
public:
    unsigned long operator()(Puzzle *puzzleObject) const{
        return puzzleObject->getHashValue();
    }
};

/*
 * Η κλάση PuzzlePtrEquals, υλοποιεί τον τελεστή () που αποτελεί τον τελεστή ισότητας για δύο αντικείμενα Puzzle μέσω δεικτών τους.
 *
 * Δέχεται ως όρισμα δύο δείκτες σε Puzzle και αν τα αντικείμενα στα οποία δείχουν οι αντίστοιχοι δείκτες είναι ίσα σύμφωνα με τον
 * τελεστή ισότητας (==) της κλάσης Puzzle τότε επιστρέφει true. Σε διαφορετική περίπτωση επιστρέφει false.
 *
 * Χρησιμοποιείται ως παράμετρος τύπου στην κλάση unordered_set ώστε εκείνη να μπορεί να αποθηκεύει δείκτες σε και όχι
 * τα ίδια τα αντικείμενα Puzzle, ενώ παράλληλα να έχει την δυνατότητα να ελέγχει την ισότητα των αντικειμένων που μας ενδιαφέρουν
 * (και αντιστοιχούν στους δείκτες) και είναι απαραίτητο για την λειτουργία της κλάσης unordered_set με τον τρόπο που μας ενδιαφέρει
 * (να ελέγχει την ύπαρξη και να εξασφαλίζει μοναδικότητα των αντικειμένων Puzzle που αντιστοιχούν σε δείκτες που αποθηκεύει).
 */
class PuzzlePtrEquals{
public:
    bool operator()(Puzzle *lhs, Puzzle *rhs) const{
        return *lhs == *rhs;
    }
};

/*
 * Η κλάση PuzzleGreaterHeuristicValueComparator, υλοποιεί τον τελεστή () που αποτελεί συγκριτή των αποθηκευμένων
 * ευρετικών τιμών δύο καταστάσεων που αντιστοιχούν στους δείκτες των παραμέτρων.
 *
 * Δέχεται ως όρισμα δύο δείκτες σε αντικείμενα Puzzle και επιστρέφει μία λογική τιμή για το αν η αποθηκευμένη ευρεστική τιμή του αντικειμένου
 * του δείκτη της πρώτης παραμέτρου είναι μεγαλύτερη το αντίστοιχο της δεύτερης.
 *
 * Χρησιμοποιείται ως παράμετρος τύπου στην κλάση priority_queue ώστε εκείνη να μπορεί να αποθηκεύει δείκτες σε και όχι
 * τα ίδια τα αντικείμενα Puzzle, ενώ παράλληλα να έχει την δυνατότητα να μπορεί να συγκρίνει τις ευρετικές τιμές των αντικειμένων που μας ενδιαφέρουν
 * (και αντιστοιχούν στους δείκτες) και είναι απαραίτητο για την λειτουργία της κλάσης priority_queue με τον τρόπο που μας ενδιαφέρει
 * (να δίνει με την χρήση της κατάλληλης μεθόδου σε μικρό χρόνο την κατάσταση εκείνη με την μικρότερη ευρετική τιμή).
 */
class PuzzleGreaterHeuristicValueComparator{
public:
    bool operator()(const Puzzle* lhs, const Puzzle* rhs) const{
        return lhs->getHeuristicEvaluation() > rhs->getHeuristicEvaluation();
    }
};

#endif //PUZZLE_H
